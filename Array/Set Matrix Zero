Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.

You must do it in place.

 

Example 1:


Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]
Example 2:


Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]
 

Constraints:

m == matrix.length
n == matrix[0].length
1 <= m, n <= 200
-231 <= matrix[i][j] <= 231 - 1
 

Follow up:

A straightforward solution using O(mn) space is probably a bad idea.
A simple improvement uses O(m + n) space, but still not the best solution.
Could you devise a constant space solution?

This was my first code .
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        /*     
logic 
i/j th index is having a 0
here i can store the value of i and j for later to transform them to 0s 
lets try this
         */
         int m = matrix.size();
         int n = matrix[0].size();
         set<int>s1;
         set<int>s2;
         for(int i=0;i<m;i++)
         {
             for(int j =0;j<n;j++)
             {
                 if(matrix[i][j]==0){
                     s1.insert(i);
                     s2.insert(j);
                 }
             }
         }
         for(int i=0;i<m;i++)
         {
                 if(s1.find(i)!=s1.end())
                 {
                     for(int j = 0;j<n;j++){
                           matrix[i][j]=0;

                     }
                   
                 }     
             
         }
         for(int j=0;j<n;j++)
         {
                 if(s2.find(j)!=s2.end())
                 {
                     for(int i = 0;i<m;i++){
                           matrix[i][j]=0;

                     }
                   
                 }     
             
         }
    }
};





